# 變數 factorB 中含有10%的遺漏值
s.dc.missing_detector(DT = dataset, NA_obs_out = TRUE)
s.dc.missing_detectorr <- function(DT, listout_col = NULL, NA_obs_out = FALSE){
DT <- copy(as.data.frame(DT))
DT <- data.frame(lapply(DT, as.character), stringsAsFactors = FALSE)
dataset <- copy(as.data.table(DT))
if (is.null(listout_col)){
listout_col <- colnames(dataset)
}
DT <- as.data.frame(dataset)
missing_count <- 0
for (colName in colnames(DT)){
obs <- DT[colName][[1]]
typeis <- class(obs)
if (typeis %in% c('integer', 'numeric')){
missDT <- DT[is.na(obs) == TRUE, listout_col]
}else{
if (dim(DT[obs == '', ])[1] != 0){
missDT <- DT[obs == '', listout_col]
}else{
missDT <- DT[is.na(obs) == TRUE, listout_col]
}
}
if (dim(missDT)[1] != 0){
missing_count <- missing_count + 1
missing.ratio <- (dim(missDT)[1]/dim(DT)[1]) * 100
waring <- paste0('變數 ', colName, ' 中含有', round(missing.ratio, digits = 2), '%的遺漏值')
if (missing.ratio > 50){
waring <- paste0(waring, '，比例超過50%，建議刪除')
cat(waring, '\n')
}else{
cat(waring, '\n')
}
if (NA_obs_out == TRUE){
print(missDT)
}
}
}
if (missing_count <= 0){
cat('該資料集無Missing Data\n')
}
}
# 預設值結果，僅列出變數的遺漏值比例
s.dc.missing_detectorr(DT = dataset)
# 變數 conA 中含有3%的遺漏值
#
# 變數 factorB 中含有10%的遺漏值
s.dc.missing_detectorr(DT = dataset, NA_obs_out = TRUE)
dataset <- as.data.table(data.frame(
ID = paste0('S', sprintf("%03d", 1:100)),
conA = sample(c(round(rnorm(95, mean = 5, sd = 1)), c(1000, -100), rep(NA, 3))),
conB = sample(c(round(rnorm(94, mean = 5, sd = 1)), c(100, -1000), rep(NA, 4))),
conC = sample(c(round(rnorm(93, mean = 5, sd = 1)), c(1000, -1000), rep(NA, 5))),
strD = factor(sample(c(sample(c('A', 'B', 'C'), 90, replace = TRUE), rep(NA_character_, 10)))),
strE = sample(c(sample(c('AA', 'BB', 'CC'), 80, replace = TRUE), rep(NA_character_, 20))),
dateF = sample(c(sample(seq.Date(as.Date("2020-01-01"), as.Date("2023-12-31"), by = "day"), 90, replace = TRUE), rep(NA, 10)))
))
DT = dataset
NA_obs_out = TRUE
DT <- copy(as.data.frame(DT))
DT <- data.frame(lapply(DT, as.character), stringsAsFactors = FALSE)
dataset <- copy(as.data.table(DT))
if (is.null(listout_col)){
listout_col <- colnames(dataset)
}
listout_col = NULL
if (is.null(listout_col)){
listout_col <- colnames(dataset)
}
DT <- as.data.frame(dataset)
missing_count <- 0
colName = 'conA'
obs <- DT[colName][[1]]
typeis <- class(obs)
listout_col
obs
typeis %in% c('integer', 'numeric')
dim(DT[obs == '', ])[1] != 0
class(DT)
DT[obs == '', ]
DT
obs
DT[obs == '', ]
DT
DT[obs == '',
]
obs
DT[is.na(obs) == TRUE,
]
s.dc.missing_detectorr <- function(DT, listout_col = NULL, NA_obs_out = FALSE){
DT <- copy(as.data.frame(DT))
DT <- data.frame(lapply(DT, as.character), stringsAsFactors = FALSE)
dataset <- copy(as.data.table(DT))
if (is.null(listout_col)){
listout_col <- colnames(dataset)
}
DT <- as.data.frame(dataset)
missing_count <- 0
for (colName in colnames(DT)){
# colName = 'conA'
obs <- DT[colName][[1]]
typeis <- class(obs)
if (typeis %in% c('integer', 'numeric')){
missDT <- DT[is.na(obs) == TRUE, listout_col]
}else{
if (dim(DT[obs == '', ])[1] != 0){
missDT <- DT[obs == '' | is.na(obs) == TRUE, listout_col]
}else{
missDT <- DT[is.na(obs) == TRUE, listout_col]
}
}
if (dim(missDT)[1] != 0){
missing_count <- missing_count + 1
missing.ratio <- (dim(missDT)[1]/dim(DT)[1]) * 100
waring <- paste0('變數 ', colName, ' 中含有', round(missing.ratio, digits = 2), '%的遺漏值')
if (missing.ratio > 50){
waring <- paste0(waring, '，比例超過50%，建議刪除')
cat(waring, '\n')
}else{
cat(waring, '\n')
}
if (NA_obs_out == TRUE){
print(missDT)
}
}
}
if (missing_count <= 0){
cat('該資料集無Missing Data\n')
}
}
# 變數 conA 中含有3%的遺漏值
#
# 變數 factorB 中含有10%的遺漏值
s.dc.missing_detectorr(DT = dataset, NA_obs_out = TRUE)
detach("package:CYCHpackage", unload = TRUE)
remove.packages("CYCHpackage")
# install.packages(c('devtools', 'data.table'))
library(devtools)
devtools::install_github('Steven-CYCH/CYCHpackage')
# devtools::install_github('Steven-CYCH/CYCHpackage')
library(CYCHpackage)
library(data.table)
# 建立模擬資料集
dataset <- as.data.table(data.frame(
ID = paste0('S', sprintf("%03d", 1:100)),
conA = sample(c(round(rnorm(95, mean = 5, sd = 1)), c(1000, -100), rep(NA, 3))),
conB = sample(c(round(rnorm(94, mean = 5, sd = 1)), c(100, -1000), rep(NA, 4))),
conC = sample(c(round(rnorm(93, mean = 5, sd = 1)), c(1000, -1000), rep(NA, 5))),
strD = factor(sample(c(sample(c('A', 'B', 'C'), 90, replace = TRUE), rep(NA_character_, 10)))),
strE = sample(c(sample(c('AA', 'BB', 'CC'), 80, replace = TRUE), rep(NA_character_, 20))),
dateF = sample(c(sample(seq.Date(as.Date("2020-01-01"), as.Date("2023-12-31"), by = "day"), 90, replace = TRUE), rep(NA, 10)))
))
s.dc.missing_detector
# 預設值結果，僅列出變數的遺漏值比例
s.dc.missing_detector(DT = dataset)
# 變數 conA 中含有3%的遺漏值
#
# 變數 factorB 中含有10%的遺漏值
s.dc.missing_detectorr(DT = dataset, NA_obs_out = TRUE)
# 變數 conA 中含有3%的遺漏值
#
# 變數 factorB 中含有10%的遺漏值
s.dc.missing_detector(DT = dataset, NA_obs_out = TRUE)
# install.packages(c('devtools', 'data.table'))
library(devtools)
# devtools::install_github('Steven-CYCH/CYCHpackage')
library(CYCHpackage)
library(data.table)
# 建立模擬資料集
dataset <- as.data.table(data.frame(
ID = paste0('S', sprintf("%03d", 1:100)),
conA = sample(c(round(rnorm(95, mean = 5, sd = 1)), c(1000, -100), rep(NA, 3))),
conB = sample(c(round(rnorm(94, mean = 5, sd = 1)), c(100, -1000), rep(NA, 4))),
conC = sample(c(round(rnorm(93, mean = 5, sd = 1)), c(1000, -1000), rep(NA, 5))),
strD = factor(sample(c(sample(c('A', 'B', 'C'), 90, replace = TRUE), rep(NA_character_, 10)))),
strE = sample(c(sample(c('AA', 'BB', 'CC'), 80, replace = TRUE), rep(NA_character_, 20))),
dateF = sample(c(sample(seq.Date(as.Date("2020-01-01"), as.Date("2023-12-31"), by = "day"), 30, replace = TRUE), rep(NA, 70)))
))
# s.dc.outlier_detector ----
# 預設值結果
# 3倍標準差以外的觀察值為離群值(sig_num = 3)
# 遺漏值樣本ID不列出(NA_obs_out = FALSE)
s.dc.outlier_detector(DT = dataset)
s.dc.outlier_detectorr <- function(DT, ID_name = 'ID', sig_num = 3, NA_obs_out = FALSE, in_list = NULL, out_list = NULL) {
dataset <- copy(DT)
if (ID_name %in% colnames(dataset)){
dataset <- as.data.table(dataset)
out_list <- append(out_list, ID_name)
# 整理需要被檢測的變數
if (is.null(in_list)){
in_list <- colnames(dataset)[-which(colnames(dataset) %in% out_list)]
}else{
if (any(in_list %in% out_list) == TRUE){
in_list <- in_list[-which(in_list %in% out_list)]
}else{
in_list <- in_list
}
}
# 設定離群值的上下界
for (variable in in_list) {
cat('\n')
cat(variable, '\n')
dataset <- as.data.frame(dataset)
observation <- dataset[[variable]]
if (NA_obs_out == FALSE){
observation.not.na <- observation[!is.na(observation) & as.character(observation) != '']
if (length(observation.not.na) != length(observation)){
cat('變數', variable, '含有NA值，但已省略輸出\n')
}
}
options(warn = -1)
mean_value <- mean(observation, na.rm = TRUE)
standard_deviation <- try(sd(observation, na.rm = TRUE), silent = TRUE)
if ('try-error' %in% class(standard_deviation)){
standard_deviation <- NA
}
options(warn = 1)
upper_bound <- mean_value + standard_deviation * sig_num
lower_bound <- mean_value - standard_deviation * sig_num
if ((is.na(upper_bound) & is.na(lower_bound)) != TRUE){
# 針對各觀察值檢測其是否超出離群值範圍
for (i in 1:dim(dataset)[1]) {
obs <- dataset[i, variable]
if (is.na(obs)){
if (NA_obs_out == TRUE){
cat('ID是', dataset[[ID_name]][i], '的紀錄中有變數', variable, '的觀察值為 Missing Data \n')
}
}else{
if (obs > upper_bound | obs < lower_bound) {
cat('ID是', dataset[[ID_name]][i], '的紀錄中有變數', variable, '的觀察值疑似為離群值，觀察值為', obs, '\n')
}
}
}
}else{
cat('該變數觀察值型態非為數值，無法檢測離群值\n')
for (i in 1:dim(dataset)[1]) {
obs <- dataset[i, variable]
if (as.character(obs) == ''){
if (NA_obs_out == TRUE){
cat('ID是', dataset[[ID_name]][i], '的紀錄中有變數', variable, '的觀察值為 Missing Data \n')
}
}
}
}
}
}else{
stop('親愛的朋友，你的ID不是這個名字喔！')
}
}
# s.dc.outlier_detector ----
# 預設值結果
# 3倍標準差以外的觀察值為離群值(sig_num = 3)
# 遺漏值樣本ID不列出(NA_obs_out = FALSE)
s.dc.outlier_detectorr(DT = dataset)
DT = dataset
ID_name = 'ID'
sig_num = 3
NA_obs_out
NA_obs_out = FALSE
in_list = NULL
out_list = NULL
dataset <- copy(DT)
ID_name %in% colnames(dataset)
dataset <- as.data.table(dataset)
out_list <- append(out_list, ID_name)
# 整理需要被檢測的變數
if (is.null(in_list)){
in_list <- colnames(dataset)[-which(colnames(dataset) %in% out_list)]
}else{
if (any(in_list %in% out_list) == TRUE){
in_list <- in_list[-which(in_list %in% out_list)]
}else{
in_list <- in_list
}
}
for (variable in in_list) {a}
cat('\n')
cat(variable, '\n')
dataset <- as.data.frame(dataset)
observation <- dataset[[variable]]
if (NA_obs_out == FALSE){
observation.not.na <- observation[!is.na(observation) & as.character(observation) != '']
if (length(observation.not.na) != length(observation)){
cat('變數', variable, '含有NA值，但已省略輸出\n')
}
}
options(warn = -1)
mean_value <- mean(observation, na.rm = TRUE)
standard_deviation <- try(sd(observation, na.rm = TRUE), silent = TRUE)
if ('try-error' %in% class(standard_deviation)){
standard_deviation <- NA
}
options(warn = 1)
upper_bound <- mean_value + standard_deviation * sig_num
lower_bound <- mean_value - standard_deviation * sig_num
(is.na(upper_bound) & is.na(lower_bound)) != TRUE
in_list
variable <- 'strD'
cat('\n')
cat(variable, '\n')
dataset <- as.data.frame(dataset)
observation <- dataset[[variable]]
if (NA_obs_out == FALSE){
observation.not.na <- observation[!is.na(observation) & as.character(observation) != '']
if (length(observation.not.na) != length(observation)){
cat('變數', variable, '含有NA值，但已省略輸出\n')
}
}
options(warn = -1)
mean_value <- mean(observation, na.rm = TRUE)
standard_deviation <- try(sd(observation, na.rm = TRUE), silent = TRUE)
if ('try-error' %in% class(standard_deviation)){
standard_deviation <- NA
}
options(warn = 1)
upper_bound <- mean_value + standard_deviation * sig_num
lower_bound <- mean_value - standard_deviation * sig_num
(is.na(upper_bound) & is.na(lower_bound)) != TRUE
cat('該變數觀察值型態非為數值，無法檢測離群值\n')
for (i in 1:dim(dataset)[1]) {
obs <- dataset[i, variable]
if (as.character(obs) == ''){
if (NA_obs_out == TRUE){
cat('ID是', dataset[[ID_name]][i], '的紀錄中有變數', variable, '的觀察值為 Missing Data \n')
}
}
}
i
obs
as.character(obs) == ''
as.character(obs)
for (i in 1:dim(dataset)[1]) {
obs <- dataset[i, variable]
if (as.character(obs) == '' | is.na(as.character(obs))){
if (NA_obs_out == TRUE){
cat('ID是', dataset[[ID_name]][i], '的紀錄中有變數', variable, '的觀察值為 Missing Data \n')
}
}
}
NA_obs_out
NA_obs_out == TRUE
NA_obs_out = TRUE
for (i in 1:dim(dataset)[1]) {
obs <- dataset[i, variable]
if (as.character(obs) == '' | is.na(as.character(obs))){
if (NA_obs_out == TRUE){
cat('ID是', dataset[[ID_name]][i], '的紀錄中有變數', variable, '的觀察值為 Missing Data \n')
}
}
}
detach("package:CYCHpackage", unload = TRUE)
remove.packages("CYCHpackage")
# install.packages(c('devtools', 'data.table'))
library(devtools)
devtools::install_github('Steven-CYCH/CYCHpackage')
# devtools::install_github('Steven-CYCH/CYCHpackage')
library(CYCHpackage)
library(data.table)
# 建立模擬資料集
dataset <- as.data.table(data.frame(
ID = paste0('S', sprintf("%03d", 1:100)),
conA = sample(c(round(rnorm(95, mean = 5, sd = 1)), c(1000, -100), rep(NA, 3))),
conB = sample(c(round(rnorm(94, mean = 5, sd = 1)), c(100, -1000), rep(NA, 4))),
conC = sample(c(round(rnorm(93, mean = 5, sd = 1)), c(1000, -1000), rep(NA, 5))),
strD = factor(sample(c(sample(c('A', 'B', 'C'), 90, replace = TRUE), rep(NA_character_, 10)))),
strE = sample(c(sample(c('AA', 'BB', 'CC'), 80, replace = TRUE), rep(NA_character_, 20))),
dateF = sample(c(sample(seq.Date(as.Date("2020-01-01"), as.Date("2023-12-31"), by = "day"), 30, replace = TRUE), rep(NA, 70)))
))
# s.dc.outlier_detector ----
# 預設值結果
# 3倍標準差以外的觀察值為離群值(sig_num = 3)
# 遺漏值樣本ID不列出(NA_obs_out = FALSE)
s.dc.outlier_detector(DT = dataset)
# 4倍標準差以外的觀察值為離群值(sig_num = 4)
# 遺漏值樣本ID不列出(NA_obs_out = TRUE)
s.dc.outlier_detector(DT = dataset, sig_num = 4, NA_obs_out = TRUE)
# s.dc.missing_detector ----
處理一下文字型態跟日期型態
# s.dc.missing_detector ----
# 預設值結果，僅列出變數的遺漏值比例
s.dc.missing_detector(DT = dataset)
s.dc.missing_detector(DT = dataset, NA_obs_out = TRUE)
# s.dc.outlier_detector ----
# 預設值結果
# 3倍標準差以外的觀察值為離群值(sig_num = 3)
# 遺漏值樣本ID不列出(NA_obs_out = FALSE)
s.dc.outlier_detector(DT = dataset)
# 4倍標準差以外的觀察值為離群值(sig_num = 4)
# 遺漏值樣本ID不列出(NA_obs_out = TRUE)
s.dc.outlier_detector(DT = dataset, sig_num = 4, NA_obs_out = TRUE)
# s.dc.missing_detector ----
# 預設值結果，僅列出變數的遺漏值比例
s.dc.missing_detector(DT = dataset)
# 列出變數的遺漏值比例，並列出包含NA值樣本的其他觀察值
s.dc.missing_detector(DT = dataset, NA_obs_out = TRUE)
library(survival)
library(survminer)
library(survival)
library(survminer)
library(dplyr)
# =============
library(readxl)
# =============
# 步驟 1：讀取資料
# survival_data <- read.csv("D:\\110藥學博\\hcv diagnosis\\outex2_2870.csv")
# ==========================================================================
survival_data <- read_excel("D:\\110藥學博\\hcv diagnosis\\outex2_2870.xls")
install.packages('autoReg')
# install.packages(c('devtools', 'data.table'))
library(devtools)
library(CYCHpackage)
detach("package:CYCHpackage", unload = TRUE)
remove.packages("CYCHpackage")
devtools::install_github('Steven-CYCH/CYCHpackage')
print('hello')
# devtools::install_github('Steven-CYCH/CYCHpackage')
library(CYCHpackage)
library(data.table)
s.dc.missing_imputation
?sample
x <- list(
group1 = rnorm(35, mean = 50, sd = 10),  # 第一組資料（35個樣本）
group2 = rnorm(40, mean = 55, sd = 10)   # 第二組資料（40個樣本）
)
y <- unlist(x)
g <- factor(rep(1:length(x), times = sapply(x, length)))
y
g
is.numeric(y)
length(levels(g)) == 2
all(table(g) > 30) == TRUE
x
str(y)
colnames(y)
names(y)
y[g == '1', ]
y[g == '1']
y[g == '2']
shapiro.test(g1)
g1 <- y[g == '1']
g2 <- y[g == '2']
shapiro.test(g1)
str(shapiro.test(g1))
c(normal.test.g1, normal.test.g2) > 0.05
normal.test.g1 <- shapiro.test(g1)$p.value
normal.test.g2 <- shapiro.test(g2)$p.value
c(normal.test.g1, normal.test.g2) > 0.05
any(c(normal.test.g1, normal.test.g2) < 0.05)
g1 <- y[g == '1']
g2 <- y[g == '2']
normal.test.g1 <- shapiro.test(g1)$p.value
normal.test.g2 <- shapiro.test(g2)$p.value
test1.p <- any(c(normal.test.g1, normal.test.g2) < 0.05)
normal.test.g1 <- ad.test(g1)$p.value
install.packages("nortest")
library(nortest)
g1 <- y[g == '1']
g2 <- y[g == '2']
normal.test.g1 <- shapiro.test(g1)$p.value
normal.test.g2 <- shapiro.test(g2)$p.value
test1.p <- any(c(normal.test.g1, normal.test.g2) < 0.05)
normal.test.g1 <- ad.test(g1)$p.value
normal.test.g2 <- ad.test(g2)$p.value
test2.p <- any(c(normal.test.g1, normal.test.g2) < 0.05)
non.normal <- all(test1.p, test2.p)
non.normal
x <- list(
group1 = c("A", "A", "B", "B", "A", "A", "B"),  # 第一組資料（類別型）
group2 = c("B", "B", "A", "A", "B", "B", "A")   # 第二組資料（類別型）
)
y <- unlist(x)
g <- factor(rep(1:length(x), times = sapply(x, length)))
y
g
table(y, g)
rows(table(y, g))
row(table(y, g))
dim(table(y, g))
less5count <- sum(table(y, g) < 5)
allCount <- sum(table(y, g) >= 0)
ratio <- less5count / allCount
exp <- chisq.test(table(y, g))$expected
exp
exp.TB <- chisq.test(table(y, g))$expected
exp.TB
exp.TB >= 10
all(exp.TB >= 10)
?chisq.test
chisq.test(table(y, g), correct = TRUE)
chisq.test(table(y, g), correct = FALSE)
sum(table(g) )
table(g)
x <- list(
group1 = rnorm(35, mean = 50, sd = 10),  # 第一組資料（35個樣本）
group2 = rnorm(40, mean = 55, sd = 10)   # 第二組資料（40個樣本）
)
x <- list(
group1 = c("A", "A", "B", "B", "A", "A", "B"),  # 第一組資料（類別型）
group2 = c("B", "B", "A", "A", "B", "B", "A")   # 第二組資料（類別型）
)
y <- unlist(x)
g <- factor(rep(1:length(x), times = sapply(x, length)))
exp.TB <- chisq.test(table(y, g))
View(exp.TB)
exp.TB$df
exp.TB
exp.TB$parameter
exp.TB$parameter$df
exp.TB$parameter['df']
exp.TB$parameter['df'] == 1
exp.TB$parameter[['df']]
exp.TB$parameter[['df']] == 1
