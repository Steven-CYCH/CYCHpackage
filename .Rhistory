# # Simulate continuous data
# x <- list(
#   group1 = rnorm(35, mean = 50, sd = 10),  # 第一組資料（35個樣本）
#   group2 = rnorm(40, mean = 55, sd = 10)   # 第二組資料（40個樣本）
# )
# # Simulate discrete data
x <- list(
group1 = c("A", "A", "B", "B", "A", "A", "B"),  # 第一組資料（類別型）
group2 = c("B", "B", "A", "A", "B", "B", "A")   # 第二組資料（類別型）
)
table1_pvalue_simple <- function(x, ...) {
y <- unlist(x)
g <- factor(rep(1:length(x), times = sapply(x, length)))
if (is.numeric(y)) {
if (length(levels(g)) == 2){
if (all(table(g) > 30) == TRUE){
g1 <- y[g == '1']
g2 <- y[g == '2']
normal.test.g1 <- shapiro.test(g1)$p.value
normal.test.g2 <- shapiro.test(g2)$p.value
test1.p <- any(c(normal.test.g1, normal.test.g2) < 0.05)
normal.test.g1 <- ad.test(g1)$p.value
normal.test.g2 <- ad.test(g2)$p.value
test2.p <- any(c(normal.test.g1, normal.test.g2) < 0.05)
non.normal <- all(test1.p, test2.p)
if (non.normal == FALSE){
if (var.test(y ~ g)$p.value > 0.05) {
p <- t.test(y ~ g, var.equal = TRUE)$p.value
} else {
p <- t.test(y ~ g, var.equal = FALSE)$p.value
}
}else{
if (var.test(y ~ g)$p.value > 0.05) {
p <- t.test(y ~ g, var.equal = TRUE)$p.value
} else {
p <- t.test(y ~ g, var.equal = FALSE)$p.value
}
}
}else{
if (var.test(y ~ g)$p.value > 0.05) {
p <- t.test(y ~ g, var.equal = TRUE)$p.value
} else {
p <- t.test(y ~ g, var.equal = FALSE)$p.value
}
}
}else if (length(levels(g)) > 2){
if (all(table(g) > 30) == TRUE){
if (var.test(y ~ g)$p.value > 0.05) {
p <- summary(aov(y ~ g))[[1]][["Pr(>F)"]][1]
} else {
p <- oneway.test(y ~ g, var.equal = FALSE)$p.value
}
}else{
if (var.test(y ~ g)$p.value > 0.05) {
p <- summary(aov(y ~ g))[[1]][["Pr(>F)"]][1]
} else {
p <- oneway.test(y ~ g, var.equal = FALSE)$p.value
}
}
}
} else {
less5count <- sum(table(y, g) < 5)
allCount <- sum(table(y, g) >= 0)
ratio <- less5count / allCount
exp.TB <- chisq.test(table(y, g))
if(sum(table(g)) > 40){
if(ratio >= 0.2){
result <- try({
fisher.test(table(y, g), simulate.p.value = TRUE)$p.value
}, silent = TRUE)
if (inherits(result, "try-error")) {
message("過多0於觀察個數中")
p <- '無法計算'
} else {
p <- result
}
}else{
if(exp.TB$parameter[['df']] == 1){
if(all(exp.TB$expected >= 10)){
p <- chisq.test(table(y, g), correct = FALSE)$p.value
}else{
p <- chisq.test(table(y, g), correct = FALSE)$p.value
}
}else{
p <- chisq.test(table(y, g), correct = FALSE)$p.value
}
}
}else{
result <- try({
fisher.test(table(y, g), simulate.p.value = TRUE)$p.value
}, silent = TRUE)
if (inherits(result, "try-error")) {
message("過多0於觀察個數中")
p <- '無法計算'
} else {
p <- result
}
}
}
result <- try({
sub("<", "&lt;", format.pval(p, digits=3, eps=0.001))
}, silent = TRUE)
if (inherits(result, "try-error")) {
p <- NA
} else {
sub("<", "&lt;", format.pval(p, digits=3, eps=0.001))
}
}
table1_pvalue_simple(x)
table1_method <- function(x, ...) {
y <- unlist(x)
g <- factor(rep(1:length(x), times = sapply(x, length)))
if (is.numeric(y)) {
if (length(levels(g)) == 2){
if (all(table(g) > 30) == TRUE){
g1 <- y[g == '1']
g2 <- y[g == '2']
normal.test.g1 <- shapiro.test(g1)$p.value
normal.test.g2 <- shapiro.test(g2)$p.value
test1.p <- any(c(normal.test.g1, normal.test.g2) < 0.05)
normal.test.g1 <- ad.test(g1)$p.value
normal.test.g2 <- ad.test(g2)$p.value
test2.p <- any(c(normal.test.g1, normal.test.g2) < 0.05)
non.normal <- all(test1.p, test2.p)
if (non.normal == FALSE){
if (var.test(y ~ g)$p.value > 0.05) {
m <- 'Independent t-test'
} else {
m <- "Welch's t-test"
}
}else{
if (var.test(y ~ g)$p.value > 0.05) {
m <- 'Independent t-test'
} else {
m <- "Welch's t-test"
}
}
}else{
if (var.test(y ~ g)$p.value > 0.05) {
m <- 'Independent t-test'
} else {
m <- "Welch's t-test"
}
}
}else if (length(levels(g)) > 2){
if (all(table(g) > 30) == TRUE){
if (var.test(y ~ g)$p.value > 0.05) {
m <- "ANOVA"
} else {
m <- "Welch's ANOVA"
}
}else{
if (var.test(y ~ g)$p.value > 0.05) {
m <- "ANOVA"
} else {
m <- "Welch's ANOVA"
}
}
}
} else {
less5count <- sum(table(y, g) < 5)
allCount <- sum(table(y, g) >= 0)
ratio <- less5count / allCount
exp.TB <- chisq.test(table(y, g))
if(sum(table(g)) > 40){
if(ratio >= 0.2){
m <- "Fisher's Exact test"
}else{
if(exp.TB$parameter[['df']] == 1){
if(all(exp.TB$expected >= 10)){
m <- "Chi-square test"
}else{
m <- "Chi-square test"
}
}else{
m <- "Chi-square test"
}
}
}else{
m <- "Fisher's Exact test"
}
}
}
# # Simulate continuous data
x <- list(
group1 = rnorm(35, mean = 50, sd = 10),  # 第一組資料（35個樣本）
group2 = rnorm(40, mean = 55, sd = 10),  # 第二組資料（40個樣本）
group2 = rnorm(50, mean = 45, sd = 15)   # 第二組資料（40個樣本）
)
y <- unlist(x)
g <- factor(rep(1:length(x), times = sapply(x, length)))
y
g
all(table(g) > 30
)
leveneTest(y ~ g)
library(car)
install.packages("car")
library(car)
leveneTest(y ~ g)
leveneTest(y ~ g)$p.value
a <- leveneTest(y ~ g)
str(a)
summary(leveneTest(y ~ g))[[1]][["Pr(>F)"]][1]
summary(leveneTest(y ~ g))
str(leveneTest(y ~ g))
str(leveneTest(y ~ g))[["Pr(>F)"]]
str(leveneTest(y ~ g))[[1]]
str(leveneTest(y ~ g))
leveneTest(y ~ g)[["Pr(>F)"]]
leveneTest(y ~ g)[["Pr(>F)"]][1]
varp <- leveneTest(y ~ g)[["Pr(>F)"]][1]
varp
varp > 0.05
summary(aov(y ~ g))[[1]][["Pr(>F)"]][1]
x <- list(
group1 = rnorm(35, mean = 50, sd = 10),  # 第一組資料（35個樣本）
group2 = rnorm(40, mean = 55, sd = 10),  # 第二組資料（40個樣本）
group3 = rnorm(50, mean = 45, sd = 15)   # 第二組資料（40個樣本）
)
y <- unlist(x)
g <- factor(rep(1:length(x), times = sapply(x, length)))
is.numeric(y)
length(levels(g)) == 2
length(levels(g)) > 2
x
y <- unlist(x)
g <- factor(rep(1:length(x), times = sapply(x, length)))
length(levels(g)) > 2
varp <- leveneTest(y ~ g)[["Pr(>F)"]][1]
library(car)
varp <- leveneTest(y ~ g)[["Pr(>F)"]][1]
varp
varp > 0.05
p <- summary(aov(y ~ g))[[1]][["Pr(>F)"]][1]
p
y
g
leveneTest(y ~ g)
test <- leveneTest(y ~ g)
test
test$`Pr(>F)`
test$`Pr(>F)`[1] > 0.05
library(data.table)
install.packages("data.table")
library(data.table)
datasets <- as.data.table(datasets)
set.seed(1234)
test.data <- data.table(var1 = sample(0:100, 50, replace = TRUE),
var2 = sample(c('Yes', 'No'), 50, replace = TRUE),
var3 = sample(0:100, 50, replace = TRUE))
datasets <- test.data
var.y <- var3
datasets <- test.data
var.y <- 'var3'
threshold = 0.1
del.var.x = c()
datasets <- as.data.table(datasets)
var.x <- colnames(datasets)[!(colnames(datasets) %in% c(var.y, del.var.x))]
var.x
var.x <- colnames(datasets)[!(colnames(datasets) %in% c(var.y, del.var.x))]
simple.p <- data.table(var = NULL, p = NULL)
simplevar <- var.x[1]
# simplevar <- var.x[1]
DT.simple <- as.data.table(copy(datasets[, get(var.y)]))
DT.simple
colnames(DT.simple) <- var.y
DT.simple[, eval(simplevar) := datasets[, get(simplevar)]]
DT.simple
datasets <- test.data
var.y <- 'var3'
threshold = 0.1
del.var.x = c()
datasets <- as.data.table(datasets)
var.x <- colnames(datasets)[!(colnames(datasets) %in% c(var.y, del.var.x))]
simple.p <- data.table(var = NULL, p = NULL)
DT.simple <- as.data.table(copy(datasets[, get(var.y)]))
colnames(DT.simple) <- var.y
colnames(DT.simple)
DT.simple[, eval(simplevar) := datasets[, get(simplevar)]]
DT.simple
simple.lm.fr <- formula(paste0(var.y, ' ~ ', simplevar))
simple.lm <- lm(simple.lm.fr, data = DT.simple)
simple.lm
lm.summary <- as.data.frame(summary(simple.lm)$coefficients)
var.p <- lm.summary['Pr(>|t|)'][-1, ]
var.p
summary(simple.lm)
simple.p.cache <- data.table(var = simplevar, p = var.p)
simple.p <- rbind(simple.p, simple.p.cache)
simple.p
for (simplevar in var.x){
# simplevar <- var.x[1]
DT.simple <- as.data.table(copy(datasets[, get(var.y)]))
colnames(DT.simple) <- var.y
DT.simple[, eval(simplevar) := datasets[, get(simplevar)]]
simple.lm.fr <- formula(paste0(var.y, ' ~ ', simplevar))
simple.lm <- lm(simple.lm.fr, data = DT.simple)
lm.summary <- as.data.frame(summary(simple.lm)$coefficients)
var.p <- lm.summary['Pr(>|t|)'][-1, ]
simple.p.cache <- data.table(var = simplevar, p = var.p)
simple.p <- rbind(simple.p, simple.p.cache)
}
simple.p
var.x.LR.R <- simple.p[p < 0.1, var][!duplicated(simple.p[p < threshold, var])]
var.x.LR.R
var.x.LR.R == NULL
length(var.x.LR.R)
threshold = 0.3
var.x.LR.R <- simple.p[p < threshold, var][!duplicated(simple.p[p < threshold, var])]
var.x.LR.R
length(var.x.LR.R) == 0
LR.R <- paste(var.x.LR.R, collapse = ' + ')
LR.R
LR.R <- formula(paste0(var.y, ' ~ ', LR.R))
LR.R
fr.LR.R <- paste(var.x.LR.R, collapse = ' + ')
fr.LR.R <- formula(paste0(var.y, ' ~ ', fr.LR.R))
fr.LR.R
LR.R <- lm(fr.LR.R, data = datasets)
summary(T1.LR.R)
summary(LR.R)
library(data.table)
set.seed(1234)
test.data <- data.table(var1 = sample(0:100, 50, replace = TRUE),
var2 = sample(c('Yes', 'No'), 50, replace = TRUE),
var3 = sample(0:100, 50, replace = TRUE))
ruduce.lm <- function(datasets, var.y, threshold = 0.1, del.var.x = c()){
# datasets <- test.data
# var.y <- 'var3'
#
# threshold = 0.3
# del.var.x = c()
datasets <- as.data.table(datasets)
var.x <- colnames(datasets)[!(colnames(datasets) %in% c(var.y, del.var.x))]
simple.p <- data.table(var = NULL, p = NULL)
for (simplevar in var.x){
# simplevar <- var.x[1]
DT.simple <- as.data.table(copy(datasets[, get(var.y)]))
colnames(DT.simple) <- var.y
DT.simple[, eval(simplevar) := datasets[, get(simplevar)]]
simple.lm.fr <- formula(paste0(var.y, ' ~ ', simplevar))
simple.lm <- lm(simple.lm.fr, data = DT.simple)
lm.summary <- as.data.frame(summary(simple.lm)$coefficients)
var.p <- lm.summary['Pr(>|t|)'][-1, ]
simple.p.cache <- data.table(var = simplevar, p = var.p)
simple.p <- rbind(simple.p, simple.p.cache)
}
var.x.LR.R <- simple.p[p < threshold, var][!duplicated(simple.p[p < threshold, var])]
if (length(var.x.LR.R) == 0){
stop('There is no significance variable in simple linear regression model')
}else{
fr.LR.R <- paste(var.x.LR.R, collapse = ' + ')
fr.LR.R <- formula(paste0(var.y, ' ~ ', fr.LR.R))
LR.R <- lm(fr.LR.R, data = datasets)
# summary(LR.R)
return(LR.R)
}
}
mod <- reduce.lm(datasets = test.data, var.y = 'var3', threshold = 0.1, del.var.x = c())
ruduce.lm <- function(datasets, var.y, threshold = 0.1, del.var.x = c()){
# datasets <- test.data
# var.y <- 'var3'
#
# threshold = 0.3
# del.var.x = c()
datasets <- as.data.table(datasets)
var.x <- colnames(datasets)[!(colnames(datasets) %in% c(var.y, del.var.x))]
simple.p <- data.table(var = NULL, p = NULL)
for (simplevar in var.x){
# simplevar <- var.x[1]
DT.simple <- as.data.table(copy(datasets[, get(var.y)]))
colnames(DT.simple) <- var.y
DT.simple[, eval(simplevar) := datasets[, get(simplevar)]]
simple.lm.fr <- formula(paste0(var.y, ' ~ ', simplevar))
simple.lm <- lm(simple.lm.fr, data = DT.simple)
lm.summary <- as.data.frame(summary(simple.lm)$coefficients)
var.p <- lm.summary['Pr(>|t|)'][-1, ]
simple.p.cache <- data.table(var = simplevar, p = var.p)
simple.p <- rbind(simple.p, simple.p.cache)
}
var.x.LR.R <- simple.p[p < threshold, var][!duplicated(simple.p[p < threshold, var])]
if (length(var.x.LR.R) == 0){
stop('There is no significance variable in simple linear regression model')
}else{
fr.LR.R <- paste(var.x.LR.R, collapse = ' + ')
fr.LR.R <- formula(paste0(var.y, ' ~ ', fr.LR.R))
LR.R <- lm(fr.LR.R, data = datasets)
# summary(LR.R)
return(LR.R)
}
}
mod <- reduce.lm(datasets = test.data, var.y = 'var3', threshold = 0.1, del.var.x = c())
reduce.lm <- function(datasets, var.y, threshold = 0.1, del.var.x = c()){
# datasets <- test.data
# var.y <- 'var3'
#
# threshold = 0.3
# del.var.x = c()
datasets <- as.data.table(datasets)
var.x <- colnames(datasets)[!(colnames(datasets) %in% c(var.y, del.var.x))]
simple.p <- data.table(var = NULL, p = NULL)
for (simplevar in var.x){
# simplevar <- var.x[1]
DT.simple <- as.data.table(copy(datasets[, get(var.y)]))
colnames(DT.simple) <- var.y
DT.simple[, eval(simplevar) := datasets[, get(simplevar)]]
simple.lm.fr <- formula(paste0(var.y, ' ~ ', simplevar))
simple.lm <- lm(simple.lm.fr, data = DT.simple)
lm.summary <- as.data.frame(summary(simple.lm)$coefficients)
var.p <- lm.summary['Pr(>|t|)'][-1, ]
simple.p.cache <- data.table(var = simplevar, p = var.p)
simple.p <- rbind(simple.p, simple.p.cache)
}
var.x.LR.R <- simple.p[p < threshold, var][!duplicated(simple.p[p < threshold, var])]
if (length(var.x.LR.R) == 0){
stop('There is no significance variable in simple linear regression model')
}else{
fr.LR.R <- paste(var.x.LR.R, collapse = ' + ')
fr.LR.R <- formula(paste0(var.y, ' ~ ', fr.LR.R))
LR.R <- lm(fr.LR.R, data = datasets)
# summary(LR.R)
return(LR.R)
}
}
mod <- reduce.lm(datasets = test.data, var.y = 'var3', threshold = 0.1, del.var.x = c())
mod <- reduce.lm(datasets = test.data, var.y = 'var3', threshold = 0.3, del.var.x = c())
mod
summary(mod)
mod <- reduce.lm(datasets = test.data, var.y = 'var2', threshold = 0.3, del.var.x = c())
mod <- reduce.lm(datasets = test.data, var.y = 'var3', threshold = 0.5, del.var.x = c())
mod
mod <- reduce.lm(datasets = test.data, var.y = 'var3', threshold = 0.5, del.var.x = c('var2'))
mod
mod <- reduce.lm(datasets = test.data, var.y = 'var3', threshold = 0.5, del.var.x = c('var1'))
mod
mod <- reduce.lm(datasets = test.data, var.y = 'var1', threshold = 0.5, del.var.x = c('var1'))
mod
empty(var.x)
var.x = c()
empty(var.x)
is.null(var.x)
is.null(var.x)
library(data.table)
set.seed(1234)
test.data <- data.table(var1 = sample(0:100, 50, replace = TRUE),
var2 = sample(c('Yes', 'No'), 50, replace = TRUE),
var3 = sample(0:100, 50, replace = TRUE))
lm <- s.mt.reduce.lm(datasets = test.data, var.y = 'var3')
s.mt.reduce.lm <- function(datasets, var.y, var.x = c(), threshold = 0.1, del.var.x = c()){
# datasets <- test.data
# var.y <- 'var3'
#
# threshold = 0.3
# del.var.x = c()
datasets <- as.data.table(datasets)
if (is.null(var.x)){
var.x <- colnames(datasets)[!(colnames(datasets) %in% c(var.y, del.var.x))]
}else{
var.x <- var.x[!(var.x %in% c(var.y, del.var.x))]
}
simple.p <- data.table(var = NULL, p = NULL)
for (simplevar in var.x){
# simplevar <- var.x[1]
DT.simple <- as.data.table(copy(datasets[, get(var.y)]))
colnames(DT.simple) <- var.y
DT.simple[, eval(simplevar) := datasets[, get(simplevar)]]
simple.lm.fr <- formula(paste0(var.y, ' ~ ', simplevar))
simple.lm <- lm(simple.lm.fr, data = DT.simple)
lm.summary <- as.data.frame(summary(simple.lm)$coefficients)
var.p <- lm.summary['Pr(>|t|)'][-1, ]
simple.p.cache <- data.table(var = simplevar, p = var.p)
simple.p <- rbind(simple.p, simple.p.cache)
}
var.x.LR.R <- simple.p[p < threshold, var][!duplicated(simple.p[p < threshold, var])]
if (length(var.x.LR.R) == 0){
stop('There is no significance variable in simple linear regression model')
}else{
fr.LR.R <- paste(var.x.LR.R, collapse = ' + ')
fr.LR.R <- formula(paste0(var.y, ' ~ ', fr.LR.R))
LR.R <- lm(fr.LR.R, data = datasets)
# summary(LR.R)
return(LR.R)
}
}
lm <- s.mt.reduce.lm(datasets = test.data, var.y = 'var3')
lm <- s.mt.reduce.lm(datasets = test.data, var.y = 'var1')
lm <- s.mt.reduce.lm(datasets = test.data, var.y = 'var2')
lm <- s.mt.reduce.lm(datasets = test.data, var.y = 'var3', threshold = 0.3)
lm
summary(lm)
library(data.table)
set.seed(12345)
test.data <- data.table(var1 = sample(0:100, 50, replace = TRUE),
var2 = sample(c('Yes', 'No'), 50, replace = TRUE),
var3 = sample(0:100, 50, replace = TRUE))
lm <- s.mt.reduce.lm(datasets = test.data, var.y = 'var3')
set.seed(123)
test.data <- data.table(var1 = sample(0:100, 50, replace = TRUE),
var2 = sample(c('Yes', 'No'), 50, replace = TRUE),
var3 = sample(0:100, 50, replace = TRUE))
set.seed(123)
lm <- s.mt.reduce.lm(datasets = test.data, var.y = 'var3')
lm <- s.mt.reduce.lm(datasets = test.data, var.y = 'var3', threshold = 0.3)
lm <- s.mt.reduce.lm(datasets = test.data, var.y = 'var1', threshold = 0.3)
library(data.table)
set.seed(1234)
test.data <- data.table(var1 = sample(0:100, 50, replace = TRUE),
var2 = sample(c('Yes', 'No'), 50, replace = TRUE),
var3 = sample(0:100, 50, replace = TRUE))
lm <- s.mt.reduce.lm(datasets = test.data, var.y = 'var3', threshold = 0.3)
summary(lm)
